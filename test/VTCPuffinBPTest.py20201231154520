#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- Python -*-

"""
 @file VTCPuffinBPTest.py
 @brief ModuleDescription
 @date $Date$


"""
import sys
import time
sys.path.append(".")

# Import RTM module
import RTC
import OpenRTM_aist


# Import Service implementation class
# <rtc-template block="service_impl">

# </rtc-template>

# Import Service stub modules
# <rtc-template block="consumer_import">
# </rtc-template>


# This module's spesification
# <rtc-template block="module_spec">
vtcpuffinbptest_spec = ["implementation_id", "VTCPuffinBPTest",
		 "type_name",         "VTCPuffinBPTest",
		 "description",       "ModuleDescription",
		 "version",           "1.0.0",
		 "vendor",            "maruryota",
		 "category",          "Category",
		 "activity_type",     "STATIC",
		 "max_instance",      "1",
		 "language",          "Python",
		 "lang_type",         "SCRIPT",
		 "conf.default.max_acc", "1",
		 "conf.default.max_rot_acc", "1",
		 "conf.default.max_vel", "1",
		 "conf.default.max_rot_vel", "1",

		 "conf.__widget__.max_acc", "text",
		 "conf.__widget__.max_rot_acc", "text",
		 "conf.__widget__.max_vel", "text",
		 "conf.__widget__.max_rot_vel", "text",

         "conf.__type__.max_acc", "double",
         "conf.__type__.max_rot_acc", "double",
         "conf.__type__.max_vel", "double",
         "conf.__type__.max_rot_vel", "double",

		 ""]
# </rtc-template>

##
# @class VTCPuffinBPTest
# @brief ModuleDescription
#
#
class VTCPuffinBPTest(OpenRTM_aist.DataFlowComponentBase):

	##
	# @brief constructor
	# @param manager Maneger Object
	#
	def __init__(self, manager):
		OpenRTM_aist.DataFlowComponentBase.__init__(self, manager)

		self._d_odometry = OpenRTM_aist.instantiateDataType(RTC.TimedVelocity2D)
		"""
		"""
		self._odometryIn = OpenRTM_aist.InPort("odometry", self._d_odometry)
		self._d_currentPose = OpenRTM_aist.instantiateDataType(RTC.TimedPose2D)
		"""
		"""
		self._currentPoseIn = OpenRTM_aist.InPort("currentPose", self._d_currentPose)
		self._d_targetVelocity = OpenRTM_aist.instantiateDataType(RTC.TimedVelocity2D)
		"""
		"""
		self._targetVelocityOut = OpenRTM_aist.OutPort("targetVelocity", self._d_targetVelocity)





		# initialize of configuration-data.
		# <rtc-template block="init_conf_param">
		"""
		
		 - Name:  max_acc
		 - DefaultValue: 1
		"""
		self._max_acc = [1]
		"""
		
		 - Name:  max_rot_acc
		 - DefaultValue: 1
		"""
		self._max_rot_acc = [1]
		"""
		
		 - Name:  max_vel
		 - DefaultValue: 1
		"""
		self._max_vel = [1]
		"""
		
		 - Name:  max_rot_vel
		 - DefaultValue: 1
		"""
		self._max_rot_vel = [1]

		# </rtc-template>



	##
	#
	# The initialize action (on CREATED->ALIVE transition)
	# formaer rtc_init_entry()
	#
	# @return RTC::ReturnCode_t
	#
	#
	def onInitialize(self):
		# Bind variables and configuration variable
		self.bindParameter("max_acc", self._max_acc, "1")
		self.bindParameter("max_rot_acc", self._max_rot_acc, "1")
		self.bindParameter("max_vel", self._max_vel, "1")
		self.bindParameter("max_rot_vel", self._max_rot_vel, "1")

		# Set InPort buffers
		self.addInPort("odometry",self._odometryIn)
		self.addInPort("currentPose",self._currentPoseIn)

		# Set OutPort buffers
		self.addOutPort("targetVelocity",self._targetVelocityOut)

		# Set service provider to Ports

		# Set service consumers to Ports

		# Set CORBA Service Ports

		return RTC.RTC_OK

	#	##
	#	#
	#	# The finalize action (on ALIVE->END transition)
	#	# formaer rtc_exiting_entry()
	#	#
	#	# @return RTC::ReturnCode_t
	#
	#	#
	#def onFinalize(self):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The startup action when ExecutionContext startup
	#	# former rtc_starting_entry()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onStartup(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The shutdown action when ExecutionContext stop
	#	# former rtc_stopping_entry()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onShutdown(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The activated action (Active state entry action)
	#	# former rtc_active_entry()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onActivated(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The deactivated action (Active state exit action)
	#	# former rtc_active_exit()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onDeactivated(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The execution action that is invoked periodically
	#	# former rtc_active_do()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onExecute(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The aborting action when main logic error occurred.
	#	# former rtc_aborting_entry()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onAborting(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The error action in ERROR state
	#	# former rtc_error_do()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onError(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The reset action that is invoked resetting
	#	# This is same but different the former rtc_init_entry()
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onReset(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The state update action that is invoked after onExecute() action
	#	# no corresponding operation exists in OpenRTm-aist-0.2.0
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#

	#	#
	#def onStateUpdate(self, ec_id):
	#
	#	return RTC.RTC_OK

	#	##
	#	#
	#	# The action that is invoked when execution context's rate is changed
	#	# no corresponding operation exists in OpenRTm-aist-0.2.0
	#	#
	#	# @param ec_id target ExecutionContext Id
	#	#
	#	# @return RTC::ReturnCode_t
	#	#
	#	#
	#def onRateChanged(self, ec_id):
	#
	#	return RTC.RTC_OK




def VTCPuffinBPTestInit(manager):
    profile = OpenRTM_aist.Properties(defaults_str=vtcpuffinbptest_spec)
    manager.registerFactory(profile,
                            VTCPuffinBPTest,
                            OpenRTM_aist.Delete)

def MyModuleInit(manager):
    VTCPuffinBPTestInit(manager)

    # Create a component
    comp = manager.createComponent("VTCPuffinBPTest")

def main():
	mgr = OpenRTM_aist.Manager.init(sys.argv)
	mgr.setModuleInitProc(MyModuleInit)
	mgr.activateManager()
	mgr.runManager()

if __name__ == "__main__":
	main()

